import { createSlice } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';

export interface CounterState {
  numberCogs: number;
  numberCompasses: number;
  numberTablets: number;
  numberWilds: number;
  numberClones: number;
}

const initialState: CounterState = {
  numberCogs: 0,
  numberCompasses: 0,
  numberTablets: 0,
  numberWilds: 0,
  numberClones: 0,
};

export const counterSlice = createSlice({
  name: 'counter',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    incrementNumberCogs: (state) => {
      state.numberCogs += 1;
    },
    decrementNumberCogs: (state) => {
      if (state.numberCogs === 0) {
        return
      }
      state.numberCogs -= 1;
    },
    incrementNumberCompasses: (state) => {
      state.numberCompasses += 1;
    },
    decrementNumberCompasses: (state) => {
      if (state.numberCompasses === 0) {
        return
      }
      state.numberCompasses -= 1;
    },
    incrementNumberTablets: (state) => {
      state.numberTablets += 1;
    },
    decrementNumberTablets: (state) => {
      if (state.numberTablets === 0) {
        return
      }
      state.numberTablets -= 1;
    },
    incrementNumberWilds: (state) => {
      if (state.numberWilds === 3) {
        return
      }
      state.numberWilds += 1;
    },
    decrementNumberWilds: (state) => {
      if (state.numberWilds === 0) {
        return
      }
      state.numberWilds -= 1;
    },
    incrementNumberClones: (state) => {
      state.numberClones += 1;
    },
    decrementNumberClones: (state) => {
      if (state.numberClones === 0) {
        return
      }
      state.numberClones -= 1;
    },
  },
  // // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(incrementAsync.pending, (state) => {
  //       state.status = 'loading';
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //       state.status = 'idle';
  //       state.value += action.payload;
  //     });
  // },
});

export const {
  incrementNumberCogs,
  decrementNumberCogs,
  incrementNumberCompasses,
  decrementNumberCompasses,
  incrementNumberTablets,
  decrementNumberTablets,
  incrementNumberWilds,
  decrementNumberWilds,
  incrementNumberClones,
  decrementNumberClones
 } = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectNumberCogs = (state: RootState) => state.counter.numberCogs;
export const selectNumberCompasses = (state: RootState) => state.counter.numberCompasses;
export const selectNumberTablets = (state: RootState) => state.counter.numberTablets;
export const selectNumberWilds = (state: RootState) => state.counter.numberWilds;
export const selectNumberClones = (state: RootState) => state.counter.numberClones;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount: number): AppThunk => (
//   dispatch,
//   getState
// ) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default counterSlice.reducer;
